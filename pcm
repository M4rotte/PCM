#!/usr/bin/env python3

import sys

try:

    sys.path.insert(0, './src')
    from os     import _exit, getpid, kill, unlink
    from time   import sleep
    from signal import signal, SIGTERM, SIGINT, SIGCHLD
    import subprocess
    import PCM
    import Listener, Watcher, Engine

except ImportError as e:

    print(str(e), file=sys.stderr)
    print('Cannot find the module(s) listed above. Exiting.', file=sys.stderr)
    sys.exit(1)

if __name__ == '__main__':

    pcm = PCM.PCM('./pcm.cfg', sys.argv)
    listener = Listener.Listener(pcm.configuration,pcm.logger)
    engine = Engine.Engine(pcm.configuration,pcm.logger,'Engine')
    watcher = Watcher.Watcher(pcm.configuration,pcm.logger,'Watcher')
    try:
        if sys.argv[1] == 'stop':
            listener.stop()
            engine.stop()
            watcher.stop()
        elif sys.argv[1] == 'start':
            if not listener.status():  p1 = subprocess.Popen([sys.argv[0],'listener'],shell=False)
            if not engine.status():  p2 = subprocess.Popen([sys.argv[0],'engine'],shell=False)
            if not watcher.status(): p3 = subprocess.Popen([sys.argv[0],'watcher'],shell=False)
        elif sys.argv[1] == 'listener':
            listener.start()
            listener.watch()
        elif sys.argv[1] == 'engine':
            engine.createSSHClient()
            engine.start()
            engine.run()
        elif sys.argv[1] == 'watcher':
            watcher.start()
            watcher.run()
        elif sys.argv[1] == 'status':
            watcher.status()
            listener.status()
            engine.status()


    except (IndexError, FileNotFoundError, NameError) as e: print(str(e), file=sys.stderr)

